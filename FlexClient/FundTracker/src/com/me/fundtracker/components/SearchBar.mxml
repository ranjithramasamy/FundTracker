<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:components="com.me.fundtracker.components.*"
				   width="100%" height="35" borderVisible="false"
				   creationComplete="onInitialize();">
	
	<fx:Script>
		<![CDATA[			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.components.DataGrid;
			import spark.components.gridClasses.GridColumn;
			
			//the collection on which the search is to be applied
			[Bindable]
			public var searchListCollection:ArrayCollection;
			
			//use the datagrid for getting the filter field labels
			[Bindable]
			public var dataGrid:DataGrid;
			
			[Bindable]
			private var columns:ArrayList;
			
			/**
			 * Reset the fields.
			 */
			protected function clearHandler(event:MouseEvent):void
			{
				txt_searchfield.text = "";
				cmb_fieldselector.selectedIndex = -1;
				
				if( searchListCollection != null )
				{
					searchListCollection.filterFunction=null;
					searchListCollection.refresh();
				}
			}
			
			/**
			 * Initiate the search operation once the searct textinput getting changed.
			 */
			protected function searchTextChangeHandler(event:Event):void
			{
				txt_searchfield.setFocus();
				doSearch();
			}
			
			/**
			 * Exposed public method to be called to force search from other pages
			 */
			public function doSearch():void
			{
				if( cmb_fieldselector.selectedIndex != -1 && searchListCollection != null )
				{
					searchListCollection.filterFunction = searchFilterFunction;
					searchListCollection.refresh();
				}
			}
			
			/**
			 * Do the filter operation.
			 */
			private function searchFilterFunction(item:Object):Boolean
			{
				if(cmb_fieldselector.selectedItem.dataField != "any"){
					return searchOperation(item, cmb_fieldselector.selectedItem, txt_searchfield.text);	
				}else{
					
					//1. starting iteration from index 1 since index 0 is the 'any' column for search
					for(var index:Number = 1; index < columns.length; index++){
						//2. call the search operation for each row
						//3. even if one column matches return the row
						if(searchOperation(item, columns.getItemAt(index) as GridColumn,txt_searchfield.text) == true){
							return true;
						}
					}
				}
				//if none of the columns satisfied the filter then you can return false
				return false;		
			}
			
			/**
			 * Filtering the collection based on search string.
			 */
			private function searchOperation(item:Object, gridColumn:GridColumn, searchWord:String):Boolean
			{
				//when the search text is empty show all text
				if(searchWord == "")
					return true;
				
				//for complex object hierarchies walk through the object 
				//get the last string object in the chain you are filtering
				var object:Object=item;
				
				var selectedField:String = gridColumn.dataField;
				
				var tokens:Array = selectedField.split(".");
				
				for(var i:int=0;i<tokens.length;i++){
					//if the object is null at any instance return false
					//since we will not be able to walk down a null object tree
					if(object==null){
						return false;
					}
					object=object[tokens[i]];
				}
				
				//check again if the object is not null
				if(object==null){
					return false;
				}
				
				//do the actual search
				return object.toString().search(new RegExp(searchWord,"?i")) > -1;
			}
			
			/**
			 * Get the grid column header text.
			 */
			protected function getGridColumnLabel(item:GridColumn):String
			{
				return item.headerText;
			}
			
			/**
			 * we know for sure it is a grid column
			 * we can get the drop down label
			 */
			protected function onInitialize():void
			{
				// get all the columns
				columns = dataGrid.columns as ArrayList;
				//insert the any column and make it invisible
				var anyColumn:GridColumn=new GridColumn();
				anyColumn.headerText = 'Any Column(*)';
				anyColumn.dataField = 'any';
				anyColumn.visible = false;
				columns.addItemAt(anyColumn, 0);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:Rect x="0" y="0" height="100%" width="100%">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xC4DF9B" />
				<s:GradientEntry color="0xA3D39C" />
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xA3D39C"/>
		</s:stroke>
	</s:Rect>
	
	<s:HGroup x="0" y="0" width="100%" height="100%" gap="10" verticalAlign="middle" paddingLeft="10" paddingRight="4">
		<s:Label text="Search By:" />
		<s:DropDownList id="cmb_fieldselector" width="200" dataProvider="{dataGrid.columns}" 
						labelFunction="getGridColumnLabel"
						change="searchTextChangeHandler(event)"/>
		<s:TextInput id="txt_searchfield" width="200" change="searchTextChangeHandler(event)" enabled="{(cmb_fieldselector.selectedIndex != -1)}"/>
		<components:ActionButton id="btn_clear" label="Clear" width="100" click="clearHandler(event)"/>
	</s:HGroup>
	
</s:BorderContainer>
