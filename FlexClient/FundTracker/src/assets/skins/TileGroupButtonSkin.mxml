<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	currentStateChange="stateChangeHandler(event)"
	minHeight="40">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.default.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.graphics.IFill;
			import spark.primitives.supportClasses.FilledElement;
			import mx.graphics.SolidColor;
			import mx.core.IVisualElementContainer;
			import mx.core.IVisualElement;
			import mx.events.StateChangeEvent;
			
			//Variables for lazy initialization, caching and reference for transitions
			private var currentIconClass:Class;
			private var currentColor:uint;
			[Bindable]private var currentSymbol:Group;
			[Bindable]private var baseIconScale:Number;
			private var cachedSymbols:Array = new Array();
			
			/**
			 * Creates an instance from a FXG Component by the given Class
			 */
			protected function createFXGComponent(klass:Class):Group {
				return new klass();
			}
			
			/* Define the skin elements that should not be colorized. 
			exclude symbol and text group */
			static private const exclusions:Array = ["symbol", "textGroup"];
			
			/** 
			 * @copy spark.skins.SparkSkin#colorizeExclusions
			 */        
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
			
			/**
			 * get a instance from the library and set it up
			 */
			protected function getLibraryDefinitionInstance (klass:Class, oldState:String, newState:String):Group {
				
				var el:Group = null;
				if ((el = cachedSymbols[klass.toString()]) != null) {
					return el;
				} else {
					el = createFXGComponent (klass);
					
					//configurate the element as needed
					el.horizontalCenter = 2;
					el.verticalCenter = -1;
					el.width = el.height = 0;
					
					//Make sure the effects work the way we want it, even for changing icons between states
					if (currentState == "up" || (currentState == "over" && oldState != "down")) {
						el.scaleX = el.scaleY = baseIconScale;
					} else {
						el.scaleX = el.scaleY = 1;
					}    
					
					//cache the symbol for better perfomance
					cachedSymbols[klass.toString()] = el;
					return el;
				}
			}
			
			override protected function childrenCreated(): void {
				super.childrenCreated();
				var scale:Object = hostComponent.getStyle("iconScale");
				scale != null ? baseIconScale = Number(scale) : baseIconScale = Number(1);
			}
			
			override protected function initializationComplete():void {
				this.useChromeColor = true;
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				//trace ("-> updateDisplayList");
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			/**
			 * Updates a symbol based on the color and the iconName
			 * Leverages pseudo selectors. so that there can be different colors and icons per state
			 */
			private function updateSymbol (event:StateChangeEvent):void {
				
				//var symbolName:String = chef.iconType;
				var iconClass:Class = hostComponent.getStyle("iconClass");
				
				//TODO: Consider default class
				if (iconClass == null) {
					return;
				}
				var color:uint = hostComponent.getStyle('iconColor');
				
				//Do we really need to change the icon?
				if (currentSymbol == null || currentSymbol != null && currentIconClass != iconClass) {
					
					//Get the FXG Group with the graphics for this iconName, leveraging old and new state
					var el:Group = getLibraryDefinitionInstance (iconClass, event.oldState, event.newState);
					
					//Remove the previous one, if there is one
					symbol.removeAllElements();
					
					//add to symbol holder and set flags
					symbol.addElementAt(el,0);
					currentSymbol = el;
					currentIconClass = iconClass;
					fillIconWithColor (currentSymbol, color);
				} else {
					if (currentColor != color) {
						fillIconWithColor (currentSymbol, color);
					}
				}
				currentColor = color;
			}
			
			/*
			* Recursively seek for nested FilledElements and set the fill color to the current color
			*/
			private function fillIconWithColor (el:IVisualElementContainer, color:uint):void {
				for (var i:int = 0; i < el.numElements; i++) {
					var elem:Object = el.getElementAt(i);
					if (elem is IVisualElementContainer) {
						fillIconWithColor (IVisualElementContainer(elem), color);
					} else if (elem is FilledElement) {
						var fill:IFill = FilledElement(elem).fill;
						if (fill is SolidColor) {
							SolidColor(fill).color = color;
						}
					}
				}
			}
			
			/*
			* Handles state change events and calls to update the symbol.
			* Updating viewData could also be done in updateDisplayList.
			* Not sure what is the better way for this scenario, yet.
			*/
			protected function stateChangeHandler(event:StateChangeEvent):void
			{
				//trace ("-> stateChangeHandler");
				updateSymbol(event);
			}
			
		]]>        
	</fx:Script>
	
	<fx:Declarations>
		<s:Linear id="easer1" easeInFraction=".35" easeOutFraction=".65" />
	</fx:Declarations>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates"/>
		<s:State name="down" stateGroups="overStates" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- Transitions for the background gradient and the shadows between declared styles -->
	<s:transitions>
		
		<s:Transition  fromState="up" toState="over" autoReverse="true" >
			<s:Parallel>
				<s:AnimateColor  targets="{[ge1, ge2, ge3, ge4]}"  duration="250" />
				<s:Scale duration="150" target="{currentSymbol}" scaleXTo="1" scaleYTo="1" easer="{easer1}" autoCenterTransform="true" />
			</s:Parallel>
		</s:Transition>
		
		<s:Transition  fromState="over" toState="up" autoReverse="true" >
			<s:Parallel>
				<s:AnimateColor targets="{[ge1, ge2, ge3, ge4]}" duration="750" />
				<s:Scale duration="150" target="{currentSymbol}" scaleXTo="{baseIconScale}" scaleYTo="{baseIconScale}" easer="{easer1}"  autoCenterTransform="true" />
			</s:Parallel>
		</s:Transition>
		<s:Transition  fromState="over" toState="down" autoReverse="true" >
			<s:Animate duration="150" targets="{[dsfBg, dsfSymbol]}" >
				<s:SimpleMotionPath  property="strength" />
			</s:Animate>
		</s:Transition>
		<s:Transition  fromState="down" toState="*" autoReverse="true" >
			<s:Animate duration="150" targets="{[dsfBg, dsfSymbol]}" >
				<s:SimpleMotionPath property="strength"  />
			</s:Animate>
		</s:Transition>
		<s:Transition  fromState="down" toState="*" autoReverse="true" >
			<s:Animate duration="150" targets="{[dsfBg, dsfSymbol]}" >
				<s:SimpleMotionPath property="strength"  />
			</s:Animate>
		</s:Transition>
		
	</s:transitions>
	
	<!-- The background gradient in greyscale, using lighter values on overstates (stateGroup) -->
	<s:Rect left="1" right="1" top="1" bottom="1" radiusX="4" radiusY="4">
		<s:filters>
			<s:DropShadowFilter id="dsfBg" alpha="0.5" blurX="0" blurY="0" distance="1" strength="1" strength.down="0"  />
		</s:filters>
		<s:fill>
			<s:LinearGradient  rotation="90">
				<s:GradientEntry id="ge1" color="#c0c0c0" color.overStates="#ffffff" ratio="0"/>
				<s:GradientEntry id="ge2" color="#939393" color.overStates="#e3e3e3" ratio="0.5"/>
				<s:GradientEntry id="ge3" color="#7e7e7e" color.overStates="#cecece" ratio="0.5"/>
				<s:GradientEntry id="ge4" color="#6a6a6a" color.overStates="#bbbbbb" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#ffffff" caps="none" weight="1" joints="miter" miterLimit="4"/>
		</s:stroke>
	</s:Rect>
	
	<!-- The divider between symbol and text -->
	<!--<s:Line blendMode="overlay" verticalCenter="0" height="90%" left="43">
		<s:stroke>
			<s:SolidColorStroke color="#3d3d3d" weight=".25" />
		</s:stroke>
	</s:Line>
	-->
	<!-- Label with a shadow applied to it. In a group for colorization exclusion -->
	<s:Group id="textGroup" verticalCenter="1" horizontalCenter="1">
		<s:filters>
			<s:DropShadowFilter alpha="0.5" blurX="0" blurY="0" distance="1" />
		</s:filters>    
		<s:Label id="labelDisplay"
				 textAlign="center"
				 verticalAlign="middle"
				 lineBreak="toFit"
				 right="10">
		</s:Label>
	</s:Group>
	
	<!-- 
	The group with the symbol with a shadow applied to. In a group for colorization exclusion.
	The graphic itself will be set at runtime for the the specific state. The graphic is
	added (and removed) from this group
	-->
	<s:Group id="symbol" verticalCenter="0"  width="40" >
		<s:filters>
			<s:DropShadowFilter id="dsfSymbol" blurX="0" blurY="0" distance="1"  strength="1" strength.down="0"/>
		</s:filters>
	</s:Group>
	
</s:SparkSkin>